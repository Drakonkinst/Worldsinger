plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "me.fallenbreath.yamlang" version "1.4.1"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenLocal()
    maven {
        name = "Jitpack"
        url = "https://jitpack.io/"
    }
    maven {
        name = "ModMenu"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "Xander Maven"
        url = "https://maven.isxander.dev/releases"
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
    maven { url = "https://maven.bawnorton.com/releases" }
    exclusiveContent {
        forRepository {
            maven {
                name = 'GeckoLib'
                url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            }
        }
        filter {
            includeGroup('software.bernie.geckolib')
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "worldsinger" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    accessWidenerPath = file("src/main/resources/worldsinger.accesswidener")
}

fabricApi {
    configureDataGeneration() {
        client = true
    }
    // FIXME: Add in later
//    configureTests {
//        createSourceSet = true
//        modId = "gametest-${project.name}"
//        eula = true
//    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    include(implementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"))
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${project.mixinsquared_version}")))
//    include(modImplementation("com.github.Drakonkinst:DataTables:v${project.data_tables_version}")) {
    include(modImplementation("io.github.drakonkinst.datatables:DataTables:${project.data_tables_version}")) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.sbl_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Mod Menu Integration (Optional)
    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // YACL (Optional)
    modCompileOnly("dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // GeckoLib
    modImplementation "software.bernie.geckolib:geckolib-fabric-${project.geckolib_version}"

    // Item Components
    modImplementation "maven.modrinth:item-components:${project.itemcomponents_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = 'assets/worldsinger/lang'
}